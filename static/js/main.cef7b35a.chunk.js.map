{"version":3,"sources":["Message.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Message","forwardRef","ref","username","text","user","Card","className","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","setMessages","docs","map","doc","id","message","data","prompt","messages","input","setInput","FormControl","Input","placeholder","value","onChange","event","target","IconButton","type","disabled","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TAqBeA,EAfCC,sBAAW,WAAqBC,GAAS,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,KAC9BC,EAAOF,IAAaC,EAAKD,SAC/B,OAEI,cAACG,EAAA,EAAD,CAAMJ,IAAKA,EAAKK,UAAS,wBAAmBF,EAAO,qBAAuB,uBAA1E,SACI,cAACG,EAAA,EAAD,UAEI,eAACC,EAAA,EAAD,CAAYC,MAAM,QAAQC,QAAQ,KAAKC,UAAU,KAAjD,WACMP,GAAD,UAAYD,EAAKD,UAAL,eAAZ,MADL,IACuDC,EAAKA,e,yBCE7DS,EAdKC,IAASC,cAAc,CAGvCC,OAAQ,0CACRC,WAAY,2CACZC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,Y,QC2DRC,MA/Df,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOtB,EAAP,KAAiBuB,EAAjB,KAEAC,qBAAU,WAGRd,EAAGe,WAAW,YAAYC,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAChEC,EAAYD,EAASE,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAAEC,GAAID,EAAIC,GAAIC,QAASF,EAAIG,iBAElE,IAUHX,qBAAU,WACRD,EAAYa,OAAO,uBAClB,IAGH,MAAgCd,mBAAS,IAAzC,mBAAOe,EAAP,KAAiBR,EAAjB,KAEA,EAA0BP,mBAAS,IAAnC,mBAAOgB,EAAP,KAAcC,EAAd,KAYA,OACE,sBAAKnC,UAAU,MAAf,UACE,oDACA,0CAAaJ,KACb,sBAAMI,UAAU,YAAhB,SACE,eAACoC,EAAA,EAAD,CAAapC,UAAU,mBAAvB,UACE,cAACqC,EAAA,EAAD,CAAOrC,UAAU,aAAasC,YAAY,gBAAgBC,MAAOL,EAAOM,SAAU,SAAAC,GAAK,OAAIN,EAASM,EAAMC,OAAOH,UACjH,cAACI,EAAA,EAAD,CAAY3C,UAAU,kBAAkB4C,KAAK,SAASC,UAAWX,EAAO9B,QAAQ,YAAYD,MAAM,UAAU2C,QAjBhG,SAACL,GACnBA,EAAMM,iBACNzC,EAAGe,WAAW,YAAY2B,IAAI,CAC5BnD,KAAMqC,EACNtC,SAAUA,EACVqD,UAAW1C,IAASS,UAAUkC,WAAWC,oBAG3ChB,EAAS,KASH,SACE,cAAC,IAAD,WAKN,cAAC,IAAD,UAGIF,EAASN,KAAI,gBAAGE,EAAH,EAAGA,GAAIC,EAAP,EAAOA,QAAP,OAAsB,cAAC,EAAD,CAAkBlC,SAAUA,EAAUC,KAAMiC,GAA9BD,YCrD5CuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cef7b35a.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React, { forwardRef } from 'react'\r\nimport './Message.css';\r\n\r\n// to have reference\r\n// higher order function es6\r\nconst Message = forwardRef(({ username, text }, ref) => {\r\n    const user = username === text.username; //if message send is our username\r\n    return (\r\n\r\n        <Card ref={ref} className={`message__card ${user ? \"message__card-user\" : \"message__card-guest\"}`}>\r\n            <CardContent>\r\n                {/* variant make it appear h5 but component make html element of h2 */}\r\n                <Typography color=\"white\" variant=\"h5\" component=\"h2\" >\r\n                    {!user && `${text.username || `Unknown User`}: `} {text.text}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n})\r\n\r\nexport default Message\r\n","import firebase from \"firebase\"\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\n    apiKey: \"AIzaSyA68ZOE-EPoi315zwdTFLuoaiIWFXeLx5w\",\r\n    authDomain: \"facebook-messenger-a9d6d.firebaseapp.com\",\r\n    projectId: \"facebook-messenger-a9d6d\",\r\n    storageBucket: \"facebook-messenger-a9d6d.appspot.com\",\r\n    messagingSenderId: \"230133687542\",\r\n    appId: \"1:230133687542:web:6e250e441d88ac4fe578d7\",\r\n    measurementId: \"G-KHVF5RJKJN\"\r\n\r\n});\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import { Button, FormControl, InputLabel, Input, IconButton } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Message from './Message';\nimport SendIcon from '@material-ui/icons/Send';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\n\n\nfunction App() {\n  //storing username and set username\n  const [username, setUsername] = useState('');\n  //calling on loading page and ask for user\n  useEffect(() => {\n    // run once when app loads\n    //snapshot run every single time dataabase take change pic\n    db.collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({ id: doc.id, message: doc.data() })));\n    })\n  }, [])\n  // id to have key and render only key elemnet not all\n\n  // useEffect(() => {\n  //   //when app.js loads\n  //   db.collection('messages').onSnapshot(snapshot => {\n  //     setMessages()\n  //   })\n  // }, [])\n\n  useEffect(() => {\n    setUsername(prompt(\"Enter username: \"))\n  }, [])\n\n  //store message as a array of object having username and text\n  const [messages, setMessages] = useState([]);\n  //take input that is text of message\n  const [input, setInput] = useState('');\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    db.collection('messages').add({\n      text: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    // setMessages([...messages, { username: username, text: input }]);\n    setInput('');\n  }\n  return (\n    <div className=\"App\">\n      <h1>Facebook Messenger</h1>\n      <h2>Welcome {username}</h2>\n      <form className=\"app__form\">\n        <FormControl className=\"app__formcontrol\">\n          <Input className=\"app__input\" placeholder=\"Enter message\" value={input} onChange={event => setInput(event.target.value)} />\n          <IconButton className=\"app__iconButton\" type=\"submit\" disabled={!input} variant=\"contained\" color=\"primary\" onClick={sendMessage}>\n            <SendIcon />\n          </IconButton>\n          {/* icon button wrap sendicon and make it as button */}\n        </FormControl>\n      </form>\n      <FlipMove>\n        {\n          // prompt username is passed and whole object message is passed.\n          messages.map(({ id, message }) => (<Message key={id} username={username} text={message} />))\n          // key is to render only new value not old\n        }\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}